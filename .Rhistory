matrice <- matrix(c(matrice), ncol=length(vars))
return(matrice)
# return(as.data.frame(matrice))
}
data1 <- function(vars, data=m, weights=T) {
res <- c()
for (var in vars) {
if (weights) { res <- c(res, sum(data[['weight']][which(data[[var]]==TRUE)])/sum(data[['weight']][which(data[[var]]==TRUE | data[[var]]==FALSE)])) }
else { res <- c(res, length(which(data[[var]]==T)))/length(which(data[[var]]==T | data[[var]]==FALSE)) }
}
return( matrix(res, ncol=length(vars)) )
}
color5 <- c(rainbow(4, end=4/15), "forestgreen")
accord5 <- c("Pas du tout d'accord", "Pas vraiment d'accord", "Indifférent-e", "Assez d'accord", "Tout à fait d'accord")
agree5 <- c("Strongly disagree", "Disagree", "Indifferent", "Agree", "Strongly agree")
evol5 <- c("Baisser fortement", "Baisser légèrement", "Maintenir au niveau", "Augmenter légèrement", "Augmenter fortement")
evolve5 <- c("Strongly decrease", "Slightly decrease", "Maintain", "Slightly increase", "Strongly increase")
data_seuils <- function(data=m, variable, miss=T, variante="", weights=T, seuils=c(20, 40, 60, 80), closed_left = TRUE, closed_right=FALSE, order=NA, Min_min=-0.5) {
matrice <- c()
if (variante=="") {
if (is.na(order)) { order <- 1:length(variable) }
for (v in variable[order]) {
Min <- Min_min
for (j in 1:(length(seuils)+1)) {
Pass <- FALSE
if (j!=1) { Min <- seuils[j-1] }
if (j==length(seuils)+1) {
Max <- "Inf"
if (seuils[j-1]==Inf) { Pass <- T } }
else { Max <- seuils[j] }
if (weights) { matrice <- c(matrice, sum(data[['weight']][which((data[[v]]>Min | (data[[v]]==Min)*(closed_left | Pass)) & (data[[v]]<Max | (data[[v]]==Max)*((closed_right & j!=length(seuils)+1) | Pass)))])/sum(data[['weight']][which(data[[v]]>=Min_min)])) }
else { matrice <- c(matrice, length(which((data[[v]]>Min | (data[[v]]==Min)*(closed_left | Pass)) & (data[[v]]<Max | (data[[v]]==Max)*((closed_right & j!=length(seuils)+1) | Pass))))/length(which(data[[v]]>=Min_min))) } # added "+1" in (closed_right & j!=length(seuils)+1) | Pass)
}
if (miss) {
if (weights) { matrice <- c(matrice, sum(data[['weight']][which(data[[v]]==-1)])/sum(data[['weight']][which(data[[v]]!=-1 & !is.na(data[[v]]))])) }
else { matrice <- c(matrice, length(which(data[[v]]==-1 ))/length(which(data[[v]]!=-1 & !is.na(data[[v]])))) }
}
}
matrice <- matrix(c(matrice), ncol=length(variable))
}
else {
variantes <- levels(factor(data[[variante]][!is.na(data[[variable]]) & data[[variante]]!=""]))
if (is.na(order)) { order <- 1:length(variantes) }
for (var in variantes[order]) {
Min <- Min_min
for (j in 1:(length(seuils)+1)) {
Pass <- FALSE
if (j!=1) { Min <- seuils[j-1] }
if (j==length(seuils)+1) {
Max <- "Inf"
if (seuils[j-1]==Inf) { Pass <- T } }
else { Max <- seuils[j] }
if (weights) { matrice <- c(matrice, sum(data[['weight']][which((data[[variable]]>Min | (data[[variable]]==Min)*(closed_left | Pass)) & (data[[variable]]<Max | (data[[variable]]==Max)*((closed_right & j!=length(seuils)) | Pass)) & data[[variante]]==var)])/sum(data[['weight']][which(data[[variable]]>=Min_min & data[[variante]]==var)])) }
else { matrice <- c(matrice, length(which((data[[variable]]>Min | (data[[variable]]==Min)*(closed_left | Pass)) & (data[[variable]]<Max | (data[[variable]]==Max)*((closed_right & j!=length(seuils)) | Pass)) & data[[variante]]==var))/length(which(data[[variable]]>=Min_min & data[[variante]]==var))) }
}
if (miss) {
if (weights) { matrice <- c(matrice, sum(data[['weight']][which(is.missing(data[[variable]]) & data[[variante]]==var)])/sum(data[['weight']][which(!is.missing(data[[variable]]) & data[[variante]]==var)])) }
else { matrice <- c(matrice, length(which(is.missing(data[[variable]]) & data[[variante]]==var))/length(which(!is.missing(data[[variable]]) & data[[variante]]==var))) }
}
}
matrice <- matrix(c(matrice), ncol=length(variantes))
}
return(matrice)
# return(as.data.frame(matrice))
}
barres <- function(data, file, title="", labels, color, hover=legend, nsp=TRUE, sort=TRUE, legend=hover, showLegend=T, margin_r=0, margin_l=NA) {
margin_t <- 0
if (title!="") { margin_t <- 100 }
if (grepl("<br>", title)) { margin_t <- 150 }
legendSize <- 10
legendY <- 1.1
legendX <- 0.2
# legendFont <- 'Open Sans'
if (is.na(margin_l)) { margin_l <- 4.7*max(nchar(labels)) }
if (max(nchar(labels)) > 25) { legendSize <- 9 }
# if (max(nchar(labels)) > 50) { legendSize <- 8 }
# if (max(nchar(labels)) > 60) { legendSize <- 7 }
if (max(nchar(labels)) > 50) { # 70
legendSize <- 11
legendY = 1.2
legendX=1
margin_t = 170
}
if (!showLegend) { margin_t <- margin_t - 70}
if (sort) {
agree <- c()
if (nrow(data)==5 | nrow(data)==6) { for (i in 1:length(labels)) { agree <- c(agree, data[4, i] + data[5, i]) } }
else { for (i in 1:length(labels)) { agree <- c(agree, data[1, i]) } }
labels <- labels[order(agree)]
data <- matrix(data[, order(agree)], nrow=nrow(data))
}
if (nrow(data)==1) {
hover <- hover[order(agree)]
for (i in 1:length(hover)) { hover[i] <- paste(hover[i], "<br>Choisi dans ", round(100*data[1, i]), "% des réponses", sep="")}
hovers <- matrix(hover, nrow=length(hover))
}
else {
hovers <- c()
if (nsp) {
for (i in 1:(length(hover)-1)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]/(1+data[length(hover), j])), '% des réponses<br>', round(100*data[i, j]), '% des réponses exprimées') )
}
}
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[length(hover)], '<br>', round(100*data[length(hover), j]/(1+data[length(hover), j])), '% des réponses<br>') )
}
}
else {
for (i in 1:length(hover)) {
for (j in 1:length(labels)) {
hovers <- c(hovers, paste(hover[i], '<br>', round(100*data[i, j]), '% des réponses exprimées<br>') )
}
}
}
hovers <- matrix(hovers, ncol=length(hover))
}
bars <- plot_ly(x = data[1,], y = labels, type = 'bar', orientation = 'h', text = hovers[,1],
hoverinfo = 'text', name=legend[1], sort=FALSE, marker = list(color = color[1], line = list(color = 'white', width = 0))) %>%
layout(xaxis = list(title = "",
showgrid = T,
showline = FALSE,
showticklabels = T,
gridcolor = toRGB("gray70"), # + noir, + proche de 0
gridwidth = 1,
griddash = "dot",
autotick = FALSE,
ticks = "outside",
tick0 = 0,
dtick = 0.1,
ticklen = 5,
tickwidth = 1,
tickcolor = toRGB("gray70"),
zeroline = T,
domain = c(0.15, 1)
),
yaxis = list(title = "",
showgrid = FALSE,
showline = FALSE,
showticklabels = FALSE,
categoryorder = "trace",
zeroline = FALSE),
hovermode = 'closest',
barmode = 'stack',
title = title,
titlefont = list(color='black'),
font = list(color='black'),
# paper_bgcolor = 'rgb(248, 248, 255)', plot_bgcolor = 'rgb(248, 248, 255)',
margin = list(l = margin_l, r = margin_r, t = margin_t, b = 20),
# margin = list(b = 20, t = margin_t),
legend = list(orientation='h', y=legendY, x=legendX, traceorder='normal', font=list(size=legendSize, color='black')), # family='Balto',  , family=legendFont
showlegend = showLegend) %>%
# labeling the y-axis
add_annotations(xref = 'paper', yref = 'y', x = 0.14, y = labels,
xanchor = 'right',
text = labels,
font = list(family = 'Arial', size = 14, color = 'black'),
showarrow = FALSE, align = 'right') # %>%
print(nrow(data))
print(nrow(hovers))
print(ncol(hovers))
if (nrow(data)>1) { for (i in 2:nrow(data)) {
bars <- add_trace(bars, evaluate=TRUE, x = data[i,], name=legend[i], text = hovers[,i], hoverinfo = 'text', marker = list(color = color[i]))
} }
# labeling the first Likert scale (on the top)
# add_annotations(xref = 'x', yref = 'paper',
#                 x = c(10, 90, 110),
#                 y = 1.05,
#                 text = c("Oui", "Non", "NSP"),
#                 font = list(family = 'Arial', size = 16, color = 'black'),
#                 showarrow = FALSE) # %>%
# labeling the percentages of each bar (x_axis)
# add_annotations(xref = 'x', yref = 'y',
#                 x = o / 2, y = labels,
#                 text = paste(data[,"oui"], '%'),
#                 font = list(family = 'Arial', size = 14, color = 'white'),
#                 showarrow = FALSE) %>%
# add_annotations(xref = 'x', yref = 'y',
#                 x = o + n / 2, y = labels,
#                 text = paste(data[,"non"], '%'),
#                 font = list(family = 'Arial', size = 14, color = 'white'),
#                 showarrow = FALSE) %>%
# add_annotations(xref = 'x', yref = 'y',
#                 x = o + n + nsp / 2, y = labels,
#                 text = paste(data[,"nsp"], '%'),
#                 font = list(family = 'Arial', size = 14, color = 'white'),
#                 showarrow = FALSE) %>%
bars
api_create(bars, filename=file, sharing="public")
}
barres(data=data_rev_max_miss, file="revenu_max_miss", title="<b>Revenu maximal désiré</b><br>Revenu (net) maximal désiré selon la formulation de la question (en €/mois)", labels=rev(c("Maximum légal désiré (s)", "s + argument anti-impôt", "Dans une société idéale")), color=c(color5[1:4], 'blue', 'lightgrey'), hover=c("Moins de 4 999€/mois", "De 5 000€/mois à 9 999€/mois", "De 10 000€/mois à 29 999€/mois", "Plus de 30 000€/mois", "Pas de plafond désiré", "NSP"), legend=c("Moins de 4 999", "De 5 000 à 9 999", "De 10 000 à 29 999", "Plus de 30 000", "Pas de plafond désiré", "NSP"), nsp=T, sort=FALSE, showLegend=T, margin_r=0, margin_l=NA)
data_rev_max_miss <- cbind(data_seuils(variable="revenu_max_ideal", seuils=seuils_rev_max, miss=T), data_seuils(data=m2, variable="revenu_max", variante="variante_max", seuils=seuils_rev_max, miss=T))
m2 <- m
m2$variante_max[m2$variante_max=="d" | m2$variante_max=="t"] <- ""
m2$variante_max[m2$vague==2 & !is.na(m2$revenu_max)] <- "max_s"
seuils_rev_max <- c(5000, 10000, 30000, Inf)
data_rev_max <- cbind(data_seuils(variable="revenu_max_ideal", seuils=seuils_rev_max, miss=FALSE), data_seuils(data=m2, variable="revenu_max", variante="variante_max", seuils=seuils_rev_max, miss=FALSE))
data_rev_max_miss <- cbind(data_seuils(variable="revenu_max_ideal", seuils=seuils_rev_max, miss=T), data_seuils(data=m2, variable="revenu_max", variante="variante_max", seuils=seuils_rev_max, miss=T))
barres(data=data_rev_max_miss, file="revenu_max_miss", title="<b>Revenu maximal désiré</b><br>Revenu (net) maximal désiré selon la formulation de la question (en €/mois)", labels=rev(c("Maximum légal désiré (s)", "s + argument anti-impôt", "Dans une société idéale")), color=c(color5[1:4], 'blue', 'lightgrey'), hover=c("Moins de 4 999€/mois", "De 5 000€/mois à 9 999€/mois", "De 10 000€/mois à 29 999€/mois", "Plus de 30 000€/mois", "Pas de plafond désiré", "NSP"), legend=c("Moins de 4 999", "De 5 000 à 9 999", "De 10 000 à 29 999", "Plus de 30 000", "Pas de plafond désiré", "NSP"), nsp=T, sort=FALSE, showLegend=T, margin_r=0, margin_l=NA)
data_notation <- t(matrix(c(t(data5(c("note_actuel", "note_egalitaire", "note_personnalise", "note_utilitarien", "note_rawlsien", "note_mediane", "note_mediane_rdb"), miss=FALSE)),
c(length(which(is.na(m$note_actuel)))/(nrow(m)-length(which(is.na(m$note_actuel)))),length(which(is.na(e$note_egalitaire)))/(nrow(e)-length(which(is.na(e$note_egalitaire)))),length(which(is.na(e$note_personnalise)))/(nrow(e)-length(which(is.na(e$note_personnalise)))),length(which(is.na(e$note_utilitarien)))/(nrow(e)-length(which(is.na(e$note_utilitarien)))),length(which(is.na(e$note_rawlsien)))/(nrow(e)-length(which(is.na(e$note_rawlsien)))),length(which(is.na(p$note_mediane)))/(nrow(p)-length(which(is.na(p$note_mediane)))),length(which(is.na(p$note_mediane_rdb)))/(nrow(p)-length(which(is.na(p$note_mediane_rdb)))))), ncol=6))
barres(file="notations_nsp", title="<b>Notations de différentes distributions de niveaux de vie</b>", data=data_notation, sort=T, nsp=T, color=c(color5, "lightgrey"), legend = c(-2:0, "+1", "+2", "NSP"), hover=c(-2:0, "+1", "+2", "NSP"), labels=c("Actuelle", "Égalitaire", "Personnalisée", "Issue de l'optimisation utilitarienne", "Issue de l'optimisation rawlsienne", "Issue des réponses médianes, algo av&des", "Issue des réponses médianes, algo RdB"))
decrit(m$refugies, miss=T, weights=m$weight)
#### Réfugiés ####
decrit(m$quota_commune, miss=T, weights=m$weight)
decrit(m$refugies, miss=T, weights=m$weight)
# stack_bars(c("recherche", "superieur", "secondaire", "primaire", "culture", "infrastructures", "defense", "securite", "justice", "sante", "depense_publique"), labels=c("La recherche scientifique", "L'enseignement supérieur", "L'enseignement secondaire", "L'école maternelle et primaire", "La culture", "Les infrastructures", "La défense et l'armée", "La sécurité intérieure", "La justice", "Le système de santé", "La dépense publique totale"), accord=FALSE, title="Souhaits d'évolution des dépenses publiques (N=1007)", miss=FALSE)
# stack_bars(c("recherche", "securite", "justice", "secondaire", "superieur", "primaire", "sante", "defense", "infrastructures", "culture", "depense_publique"), labels=c("La recherche scientifique", "La sécurité intérieure", "La justice", "L'enseignement secondaire", "L'enseignement supérieur", "L'école maternelle et primaire", "Le système de santé", "La défense et l'armée", "Les infrastructures", "La culture", "La dépense publique totale"), accord=FALSE, title="Souhaits d'évolution des dépenses publiques (N=1007)", miss=FALSE)
decrit(m$contradiction_matrices, weights=m$weight)
decrit(p$refugies, miss=T, weights=p$weight)
decrit <- function(variable, miss = FALSE, weights = NULL) {
if (length(annotation(variable))>0) {
if (!miss) {
if (is.element("Oui", levels(as.factor(variable)))| is.element("quotient", levels(as.factor(variable)))  | is.element("Pour", levels(as.factor(variable)))) { describe(as.factor(variable[variable!="" & !is.na(variable)]), weights = weights[variable!="" & !is.na(variable)]) }
else { describe(as.numeric(as.vector(variable[variable!="" & !is.na(variable)])), weights = weights[variable!="" & !is.na(variable)]) }
}
else describe(as.factor(include.missings(variable[variable!="" & !is.na(variable)])), weights = weights[variable!="" & !is.na(variable)]) }
else {  describe(variable[variable!=""], weights = weights[variable!=""])  }
}
decrit(m$refugies, miss=T, weights=m$weight)
describe(p$refugies)
decrit(as.numeric(m$refugies), miss=T, weights=m$weight)
)
describe(p$refugies)
labels(p$refugies)
labels(m$refugies)
p$refugies[1:10]
levels(m$refugies)
decrit(as.numeric(m$refugies), miss=T, weights=m$weight)
m$moinsRefugies <- as.numeric(m$refugies) == 6 || as.numeric(m$refugies) == 7
decrit(m$moinsRefugies)
m$moinsRefugies <- (as.numeric(m$refugies) == 6) || (as.numeric(m$refugies) == 7)
decrit(m$moinsRefugies)
length(which(as.numeric(m$refugies) == 6))
describe(m$moinsRefugies)
m$moinsRefugies
m$moinsRefugies <- (as.numeric(m$refugies) == 6) + (as.numeric(m$refugies) == 7)
decrit(m$moinsRefugies)
length(which(!is.na(m$moinsRefugies) & !is.na(m$revenu_max)))
m$moinsRefugies <- (as.numeric(m$refugies) == 6) | (as.numeric(m$refugies) == 7)
decrit(m$moinsRefugies)
is.na(m$moinsRefugies) <- (as.numeric(m$refugies) < 5) | (as.numeric(m$refugies) > 6)
m$moinsRefugies <- (as.numeric(m$refugies) == 6) | (as.numeric(m$refugies) == 7)
is.na(m$moinsRefugies) <- (as.numeric(m$refugies) == 1)
decrit(m$moinsRefugies)
length(which(!is.na(m$moinsRefugies) & !is.na(m$revenu_max)))
length(which(!is.na(m$moinsRefugies) & !is.na(m$approbation)))
length(which(!is.na(m$moinsRefugies) & !is.na(m$Approbation)))
length(which(!is.na(m$moinsRefugies) & !is.na(m$approbation_mediane)))
length(which(!is.na(m$moinsRefugies) & !is.na(m$approbation_moyenne)))
decrit(m$approbation_moyenne[!is.na(m$moinsRefugies)])
decrit(m$approbation_mediane[!is.na(m$moinsRefugies)])
decrit(m$approbation_mediane_rdb[!is.na(m$moinsRefugies)])
decrit(m$approbation_mediane_aid[!is.na(m$moinsRefugies)])
decrit(m$approbation_mediane_rdb[!is.na(m$approbation_mediane)])
decrit(m$vague[!is.na(m$moinsRefugies)])
decrit(m$vague[!is.na(m$approbation_mediane)])
decrit(m$approbation_mediane[m$vague==2])
decrit(m$approbation_moyenne[m$vague==2])
decrit(m$Approbation[m$vague==2])
decrit(m4$Approbation[m4$vague==2])
492
417+92
488
505
509+488
492+505
m$pro_redistribution <- (m$approbation_mediane_rdb == "Oui") | (m$approbation_moyenne == "Oui")
decrit(m$pro_redistribution)
length(which(is.na(m$approbation_mediane_rdb) & is.na(m$approbation_moyenne)))
length(which(is.na(m$approbation_mediane_rdb))
)
length(which(is.missing(p$approbation_mediane_rdb) & is.missing(p$approbation_moyenne)))
length(which(is.missing(p$approbation_mediane_rdb)))
length(which(is.missing(p$approbation_mediane) & is.missing(p$approbation_moyenne)))
length(which(is.missing(p$approbation_mediane_rdb) & is.missing(p$approbation_moyenne)))
length(which(is.missing(p$approbation_mediane_rdb) | is.missing(p$approbation_moyenne)))
length(which(is.missing(p$approbation_mediane_rdb) | is.missing(p$approbation_mediane)))
corr(m$pro_redistribution, m$moinsRefugies)
corr(m$pro_redistribution, m$moinsRefugies, na.rm=T)
length(which(is.na(m$pro_redistribution) & is.na(m$moinsRefugies)))
corr(cbind(m$pro_redistribution, m$moinsRefugies))
corr(cbind(m$pro_redistribution, m$moinsRefugies), na.rm=T)
cov(cbind(m$pro_redistribution, m$moinsRefugies))
summary(lm(m$pro_redistribution ~ m$moinsRefugies))
length(which(!is.na(m$pro_redistribution) & !is.na(m$moinsRefugies)))
correlate(m$pro_redistribution, m$moinsRefugies)
cor(cbind(m$pro_redistribution, m$moinsRefugies))
cor(m$pro_redistribution, m$moinsRefugies)
cor(m$pro_redistribution, m$moinsRefugies, na.rm=T)
cor(m$pro_redistribution, m$moinsRefugies, use = "complete.obs")
length(which(m$pro_redistribution & m$moinsRefugies))
length(which(m$pro_redistribution & !m$moinsRefugies))
length(which(!m$pro_redistribution & m$moinsRefugies))
length(which(!m$pro_redistribution & !m$moinsRefugies))
m$anti_redistribution <- (m$approbation_mediane_rdb == "Non") | (m$approbation_moyenne == "Non")
cor(m$anti_redistribution, m$moinsRefugies, use = "complete.obs") # corrélation -0.05
summary(lm(m$anti_redistribution ~ m$moinsRefugies)) # no correlation on 307 obs.
length(which(m$anti_redistribution & m$moinsRefugies))
length(which(m$anti_redistribution & !m$moinsRefugies))
update.packages(ask = FALSE, checkBuilt = TRUE)
load("/var/www/dynaresf/future population francaise par age - INSEE.xls")
load("/var/www/dynaresf/future population francaise par age - INSEE.xls")
read.xls("/var/www/dynaresf/future population francaise par age - INSEE.xls")
read.xls("future population francaise par age - INSEE.xls")
package <- function(p) {
if (!is.element(p, installed.packages()[,1])) {
install.packages(p);
}
library(p, character.only = TRUE)
} # loads packages with automatical install if needed
package("gdata")
read.xls("future population francaise par age - INSEE.xls")
read.xls("https://www.insee.fr/fr/statistiques/fichier/2496716/irsocprojpop1370_FECcentESPcentMIGcent.xls")
package("readxl")
read_excel("https://www.insee.fr/fr/statistiques/fichier/2496716/irsocprojpop1370_FECcentESPcentMIGcent.xls")
read_xls("future population francaise par age - INSEE.xls")
read_xls("./future population francaise par age - INSEE.xls")
setwd("/var/www/dynaresf/")
read.xls("future population francaise par age - INSEE.xls")
read.xls("future population francaise par age - INSEE.xls")
read_xls("./future population francaise par age - INSEE.xls")
read_xls("future population francaise par age - INSEE.xls")
getwd()
setwd("/var/www/dynaresf/")
getwd()
setwd("/var/www/dynaresf")
getwd()
read.xls("future population francaise par age - INSEE.xls")
pop_future <- read.xls("future population francaise par age - INSEE.xls")
View(pop_future)
pop_future <- read.xls("https://www.insee.fr/fr/statistiques/fichier/2496716/irsocprojpop1370_FECcentESPcentMIGcent.xls", sheet=2)
pop_future <- read.xls("https://www.insee.fr/fr/statistiques/fichier/2496716/irsocprojpop1370_FECcentESPcentMIGcent.xls")
pop_future <- read_xls("https://www.insee.fr/fr/statistiques/fichier/2496716/irsocprojpop1370_FECcentESPcentMIGcent.xls")
pop_future <- read.xls("future population francaise par age - INSEE.xls", sheet=2)
pop_future <- read_xls("future population francaise par age - INSEE.xls", sheet=2)
View(pop_future)
pop_future <- read_xls("future population francaise par age - INSEE.xls", sheet=2, colnames=FALSE)[-1:4,]
pop_future <- read_xls("future population francaise par age - INSEE.xls", sheet=2, col_names=FALSE)[-(1:4),]
View(pop_future)
colnames(pop_future) <- pop_future[,1]
View(pop_future)
pop_future <- read_xls("future population francaise par age - INSEE.xls", sheet=2, col_names=FALSE)[-(1:4),]
pop_future[,1]
colnames(pop_future) <- pop_future[1,]
View(pop_future)
pop_future[1,1] <- age
pop_future[1,1] <- "age"
pop_future <- read.xls("future population francaise par age - INSEE.xls")[-(1:4),]
pop_future <- read.xls("future population francaise par age - INSEE.xls")[-(1:4),]
pop_future[1,1] <- "age"
colnames(pop_future) <- pop_future[1,]
pop_future <- as.numeric(read.xls("future population francaise par age - INSEE.xls")[-(1:4),])
pop_future <- read.xls("future population francaise par age - INSEE.xls")[-(1:4),]
pop_future <- read.xls("future population francaise par age - INSEE.xls", sheet=2, col_names=FALSE)[-(1:4),]
pop_future <- read_xls("future population francaise par age - INSEE.xls", sheet=2, col_names=FALSE)[-(1:4),]
pop_future[1,1] <- "age"
colnames(pop_future) <- pop_future[1,]
View(pop_future)
pop_future <- pop_future[,-1]
View(pop_future)
pop_future <- read_xls("future population francaise par age - INSEE.xls", sheet=2, col_names=FALSE)[-(1:4),]
pop_future[1,1] <- "age"
colnames(pop_future) <- pop_future[1,]
pop_future <- pop_future[-1,]
View(pop_future)
pop_future_detail <- read_xls("future population francaise par age - INSEE.xls", sheet=2, col_names=FALSE)[-(1:4),]
pop_future_detail[1,1] <- "age"
colnames(pop_future_detail) <- pop_future_detail[1,]
pop_future <- pop_future_detail[-1,]
pop_future <- as.data.frame()
pop_future$an <- seq(2013,2070,1)
rm(pop_future)
pop_future$an <- seq(2013,2070,1)
pop_future <- data.frame()
pop_future$an <- seq(2013,2070,1)
pop_future <- as.data.frame(seq(2013,2070,1), row.names="an")
pop_future <- as.data.frame(seq(2013,2070,1), col.names="an")
View(pop_future)
pop_future <- as.data.frame("an"=seq(2013,2070,1))
names(pop_future) <- c("an")
View(pop_future)
View(pop_future_detail)
pop_future_detail <- read_xls("future population francaise par age - INSEE.xls", sheet=2, col_names=FALSE)[-(1:4),]
pop_future_detail[1,1] <- "age"
colnames(pop_future_detail) <- pop_future_detail[1,]
pop_future <- pop_future_detail[-1,]
View(pop_future_detail)
pop_future_detail <- read_xls("future population francaise par age - INSEE.xls", sheet=2, col_names=FALSE)[-(1:4),]
pop_future_detail[1,1] <- "age"
colnames(pop_future_detail) <- pop_future_detail[1,]
View(pop_future_detail)
pop_future <- pop_future_detail[-1,]
View(pop_future_detail)
pop_future_detail <- read_xls("future population francaise par age - INSEE.xls", sheet=2, col_names=FALSE)[-(1:4),]
pop_future_detail[1,1] <- "age"
colnames(pop_future_detail) <- pop_future_detail[1,]
pop_future_detail <- pop_future_detail[-1,]
View(pop_future_detail)
pop_future <- as.data.frame(seq(2013,2070,1))
names(pop_future) <- c("an")
for (i in pop_future$an) pop_future$tot15_24[pop_future$an==i] <- sum(pop_future_detail[i,16:25])
for (i in pop_future$an) pop_future$tot25_54[pop_future$an==i] <- sum(pop_future_detail[i,26:55])
for (i in pop_future$an) pop_future$tot55_[pop_future$an==i] <- sum(pop_future_detail[i,56:])
nrow(pop_future_detail)
for (i in pop_future$an) pop_future$tot55_[pop_future$an==i] <- sum(pop_future_detail[i,56:109])
for (i in pop_future$an) pop_future$tot15_24[pop_future$an==i] <- sum(pop_future_detail[16:25,i])
for (i in pop_future$an) pop_future$tot55_[pop_future$an==i] <- sum(pop_future_detail[56:109,i])
pop_future_detail["2013"]
for (i in pop_future$an) pop_future$tot15_24[pop_future$an==i] <- sum(pop_future_detail[i][16:25])
i<-1
as.char(i)
as.character(i)
for (i in pop_future$an) pop_future$tot15_24[pop_future$an==i] <- sum(pop_future_detail[as.character(i)][16:25])
i <- 2013
pop_future_detail[as.character(i)]
pop_future_detail[as.character(i)][16:25]
pop_future_detail[as.character(i)]
pop_future_detail[16:25as.character(i)]
pop_future_detail[16:25,as.character(i)]
sum(pop_future_detail[16:25,as.character(i)])
for (i in pop_future$an) pop_future$tot15_24[pop_future$an==i] <- sum(pop_future_detail[16:25,as.character(i)])
for (i in pop_future$an) pop_future$tot25_54[pop_future$an==i] <- sum(pop_future_detail[26:55,as.character(i)])
for (i in pop_future$an) pop_future$tot55_[pop_future$an==i] <- sum(pop_future_detail[56:109,as.character(i)])
import_detail <- function() {
pop_future_detail <- read_xls("future population francaise par age - INSEE.xls", sheet=2, col_names=FALSE)[-(1:4),]
pop_future_detail[1,1] <- "age"
colnames(pop_future_detail) <- pop_future_detail[1,]
pop_future_detail <- pop_future_detail[-1,]
pop_future_f_detail <- read_xls("future population francaise par age - INSEE.xls", sheet=3, col_names=FALSE)[-(1:4),]
pop_future_f_detail[1,1] <- "age"
colnames(pop_future_f_detail) <- pop_future_f_detail[1,]
pop_future_f_detail <- pop_future_f_detail[-1,]
pop_future_h_detail <- read_xls("future population francaise par age - INSEE.xls", sheet=4, col_names=FALSE)[-(1:4),]
pop_future_h_detail[1,1] <- "age"
colnames(pop_future_h_detail) <- pop_future_h_detail[1,]
pop_future_h_detail <- pop_future_h_detail[-1,]
pop_future <- as.data.frame(seq(2013,2070,1))
names(pop_future) <- c("an")
for (i in pop_future$an)    {
pop_future$tot15_24[pop_future$an==i] <- sum(pop_future_detail[16:25,as.character(i)])
pop_future$tot25_54[pop_future$an==i] <- sum(pop_future_detail[26:55,as.character(i)])
pop_future$tot55_[pop_future$an==i] <- sum(pop_future_detail[56:109,as.character(i)])
pop_future$f15_24[pop_future$an==i] <- sum(pop_future_f_detail[16:25,as.character(i)])
pop_future$f25_54[pop_future$an==i] <- sum(pop_future_f_detail[26:55,as.character(i)])
pop_future$f55_[pop_future$an==i] <- sum(pop_future_f_detail[56:109,as.character(i)])
pop_future$h15_24[pop_future$an==i] <- sum(pop_future_h_detail[16:25,as.character(i)])
pop_future$h25_54[pop_future$an==i] <- sum(pop_future_h_detail[26:55,as.character(i)])
pop_future$h55_[pop_future$an==i] <- sum(pop_future_h_detail[56:109,as.character(i)])
}
}
import_detail
import_detail <- function() {
pop_future_detail <- read_xls("future population francaise par age - INSEE.xls", sheet=2, col_names=FALSE)[-(1:4),]
pop_future_detail[1,1] <- "age"
colnames(pop_future_detail) <- pop_future_detail[1,]
pop_future_detail <- pop_future_detail[-1,]
pop_future_f_detail <- read_xls("future population francaise par age - INSEE.xls", sheet=3, col_names=FALSE)[-(1:4),]
pop_future_f_detail[1,1] <- "age"
colnames(pop_future_f_detail) <- pop_future_f_detail[1,]
pop_future_f_detail <- pop_future_f_detail[-1,]
pop_future_h_detail <- read_xls("future population francaise par age - INSEE.xls", sheet=4, col_names=FALSE)[-(1:4),]
pop_future_h_detail[1,1] <- "age"
colnames(pop_future_h_detail) <- pop_future_h_detail[1,]
pop_future_h_detail <- pop_future_h_detail[-1,]
pop_future <- as.data.frame(seq(2013,2070,1))
names(pop_future) <- c("an")
for (i in pop_future$an)    {
pop_future$tot15_24[pop_future$an==i] <- sum(pop_future_detail[16:25,as.character(i)])
pop_future$tot25_54[pop_future$an==i] <- sum(pop_future_detail[26:55,as.character(i)])
pop_future$tot55_[pop_future$an==i] <- sum(pop_future_detail[56:109,as.character(i)])
pop_future$f15_24[pop_future$an==i] <- sum(pop_future_f_detail[16:25,as.character(i)])
pop_future$f25_54[pop_future$an==i] <- sum(pop_future_f_detail[26:55,as.character(i)])
pop_future$f55_[pop_future$an==i] <- sum(pop_future_f_detail[56:109,as.character(i)])
pop_future$h15_24[pop_future$an==i] <- sum(pop_future_h_detail[16:25,as.character(i)])
pop_future$h25_54[pop_future$an==i] <- sum(pop_future_h_detail[26:55,as.character(i)])
pop_future$h55_[pop_future$an==i] <- sum(pop_future_h_detail[56:109,as.character(i)])
}
}
import_detail
import_detail <- function() {
pop_future_detail <- read_xls("future population francaise par age - INSEE.xls", sheet=2, col_names=FALSE)[-(1:4),]
pop_future_detail[1,1] <- "age"
colnames(pop_future_detail) <- pop_future_detail[1,]
pop_future_detail <- pop_future_detail[-1,]
pop_future_f_detail <- read_xls("future population francaise par age - INSEE.xls", sheet=3, col_names=FALSE)[-(1:4),]
pop_future_f_detail[1,1] <- "age"
colnames(pop_future_f_detail) <- pop_future_f_detail[1,]
pop_future_f_detail <- pop_future_f_detail[-1,]
pop_future_h_detail <- read_xls("future population francaise par age - INSEE.xls", sheet=4, col_names=FALSE)[-(1:4),]
pop_future_h_detail[1,1] <- "age"
colnames(pop_future_h_detail) <- pop_future_h_detail[1,]
pop_future_h_detail <- pop_future_h_detail[-1,]
pop_future <- as.data.frame(seq(2013,2070,1))
names(pop_future) <- c("an")
for (i in pop_future$an)    {
pop_future$tot15_24[pop_future$an==i] <- sum(pop_future_detail[16:25,as.character(i)])
pop_future$tot25_54[pop_future$an==i] <- sum(pop_future_detail[26:55,as.character(i)])
pop_future$tot55_[pop_future$an==i] <- sum(pop_future_detail[56:109,as.character(i)])
pop_future$f15_24[pop_future$an==i] <- sum(pop_future_f_detail[16:25,as.character(i)])
pop_future$f25_54[pop_future$an==i] <- sum(pop_future_f_detail[26:55,as.character(i)])
pop_future$f55_[pop_future$an==i] <- sum(pop_future_f_detail[56:109,as.character(i)])
pop_future$h15_24[pop_future$an==i] <- sum(pop_future_h_detail[16:25,as.character(i)])
pop_future$h25_54[pop_future$an==i] <- sum(pop_future_h_detail[26:55,as.character(i)])
pop_future$h55_[pop_future$an==i] <- sum(pop_future_h_detail[56:109,as.character(i)])
}
return(pop_future)
}
pop_future <- import_detail()
View(pop_future)
rm(pop_future_detail)
save.image("/var/www/dynaresf/.RData")
